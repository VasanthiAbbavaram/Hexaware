package com.java.AssetManagement;
import static org.junit.Assert.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import org.junit.Test;
import com.java.AssetManagement.model.AssetAllocations;
public class AssetAllocationTest {
    @Test
    public void testToString() throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        AssetAllocations assetAllocation = new AssetAllocations(1, 1, 1, (sdf.parse("2024-01-10")), (sdf.parse("2024-01-15")));
        String expected = "AssetAllocations [allocationId=1, assetId=1, employeeId=1, allocationDate="+sdf.parse("2024-01-10")+ ", returnDate="+sdf.parse("2024-01-15")+"]";
        assertEquals(expected, assetAllocation.toString());
    }
    @Test
    public void testEquals() throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        AssetAllocations assetAllocation1 = new AssetAllocations(1, 1, 1, (sdf.parse("2024-01-10")), (sdf.parse("2024-01-15")));
        AssetAllocations assetAllocation2 = new AssetAllocations(1, 1, 1, (sdf.parse("2024-01-10")), (sdf.parse("2024-01-15")));
        AssetAllocations assetAllocation3 = new AssetAllocations(1, 3, 4, (sdf.parse("2024-01-16")), (sdf.parse("2024-06-16")));
        assertTrue(assetAllocation1.equals(assetAllocation2));
        assertFalse(assetAllocation1.equals(assetAllocation3));
    }
    @Test
    public void testHashCode() throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        AssetAllocations assetAllocation1 = new AssetAllocations(1, 1, 1, (sdf.parse("2024-01-10")), (sdf.parse("2024-01-15")));
        AssetAllocations assetAllocation2 = new AssetAllocations(1, 1, 1, (sdf.parse("2024-01-10")), (sdf.parse("2024-01-15")));
        assertEquals(assetAllocation1.hashCode(), assetAllocation2.hashCode());
    }
    @Test
    public void testGettersAndSetters() throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        
        AssetAllocations assetAllocation = new AssetAllocations();
        assetAllocation.setAllocationId(1);
        assetAllocation.setAssetId(1);
        assetAllocation.setEmployeeId(1);
        assetAllocation.setAllocationDate((sdf.parse("2024-01-10")));
        assetAllocation.setReturnDate((sdf.parse("2024-01-15")));
        assertEquals(1, assetAllocation.getAllocationId());
        assertEquals(1, assetAllocation.getAssetId());
        assertEquals(1, assetAllocation.getEmployeeId());
        assertEquals((sdf.parse("2024-01-10")), assetAllocation.getAllocationDate());
        assertEquals((sdf.parse("2024-01-15")), assetAllocation.getReturnDate());
        
    }
    @Test
    public void testConstructors() throws ParseException {
        AssetAllocations assetAllocation = new AssetAllocations();
        assertNotNull(assetAllocation);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        AssetAllocations constructedAssetAllocation = new AssetAllocations(1, 1, 1,(sdf.parse("2024-01-10")),(sdf.parse("2024-01-15")));
        assertEquals(1, constructedAssetAllocation.getAllocationId());
        assertEquals(1, constructedAssetAllocation.getAssetId());
        assertEquals(1, constructedAssetAllocation.getEmployeeId());
        assertEquals((sdf.parse("2024-01-10")), constructedAssetAllocation.getAllocationDate());
        assertEquals((sdf.parse("2024-01-15")), constructedAssetAllocation.getReturnDate());
       
    }
}
